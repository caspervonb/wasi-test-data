{
    "runtime": {
        "name": "wasmtime-cli",
        "version": "14.0.4"
    },
    "results": [
        {
            "path": "libc/getenv-absent.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/fopen-parent-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/stderr-hello.wasm",
            "status": "FAIL",
            "message": "--- stderr-hello.stderr\t2023-11-15 00:18:48.086202478 +0000\n+++ /tmp/tmp.g631abldKT/stderr\t2023-11-15 00:18:50.570229072 +0000\n@@ -1 +1,11 @@\n+warning: this CLI invocation of Wasmtime will be parsed differently in future\n+         Wasmtime versions -- see this online issue for more information:\n+         https://github.com/bytecodealliance/wasmtime/issues/7384\n+\n+         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n+         however this behavior can also be temporarily configured with an\n+         environment variable:\n+\n+         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n+         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\n Hello, stderr!\n"
        },
        {
            "path": "libc/stdin-hello.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/getentropy.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/assert-true.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/abort.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/ftruncate.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/clock_getres-realtime.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/fopen-directory-parent-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/getenv-present.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/fopen-working-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/exit-failure.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/clock_gettime-realtime.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/exit-success.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/clock_getres-monotonic.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/assert-false.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/main.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/clock_gettime-monotonic.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libc/stdout-hello.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_create_dir-new-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/io_stdout-hello.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_rename-file.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/process_exit-1.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_rename-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_vars-none.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/io_stderr-hello.wasm",
            "status": "FAIL",
            "message": "--- io_stderr-hello.stderr\t2023-11-15 00:18:48.146206552 +0000\n+++ /tmp/tmp.CRRjxMCJqB/stderr\t2023-11-15 00:18:51.494231642 +0000\n@@ -1 +1,11 @@\n+warning: this CLI invocation of Wasmtime will be parsed differently in future\n+         Wasmtime versions -- see this online issue for more information:\n+         https://github.com/bytecodealliance/wasmtime/issues/7384\n+\n+         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n+         however this behavior can also be temporarily configured with an\n+         environment variable:\n+\n+         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n+         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\n Hello, stderr!\n"
        },
        {
            "path": "libstd/io_stdin-hello.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_args-some.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/process_exit-120.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_vars-many.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_args-many.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/io_stdout-beowulf.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/process_exit-0.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_vars-some.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_create_dir-existing-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_metadata-file.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/io_stderr-beowulf.wasm",
            "status": "FAIL",
            "message": "--- io_stderr-beowulf.stderr\t2023-11-15 00:18:48.138206009 +0000\n+++ /tmp/tmp.9YqI9rR79R/stderr\t2023-11-15 00:18:52.122233389 +0000\n@@ -1,3 +1,13 @@\n+warning: this CLI invocation of Wasmtime will be parsed differently in future\n+         Wasmtime versions -- see this online issue for more information:\n+         https://github.com/bytecodealliance/wasmtime/issues/7384\n+\n+         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n+         however this behavior can also be temporarily configured with an\n+         environment variable:\n+\n+         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n+         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\n Hwæt. We Gardena in geardagum,\n þeodcyninga, þrym gefrunon,\n hu ða æþelingas ellen fremedon.\n"
        },
        {
            "path": "libstd/fs_file_create.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/fs_metadata-directory.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/env_args-none.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/io_stdin-beowulf.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "libstd/main.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/fd_stat_get-stdin.wasm",
            "status": "FAIL",
            "message": "warning: this CLI invocation of Wasmtime will be parsed differently in future\n         Wasmtime versions -- see this online issue for more information:\n         https://github.com/bytecodealliance/wasmtime/issues/7384\n\n         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n         however this behavior can also be temporarily configured with an\n         environment variable:\n\n         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\nabort:  in fd_stat_get-stdin.ts(22:1)\nError: failed to run main module `fd_stat_get-stdin.wasm`\n\nCaused by:\n    0: failed to invoke command default\n    1: error while executing at wasm backtrace:\n           0:  0x4c1 - <unknown>!<wasm function 9>\n           1:  0x6cd - <unknown>!<wasm function 18>\n           2:  0x6de - <unknown>!<wasm function 19>\n    2: exit with invalid exit status outside of [0..126)\n"
        },
        {
            "path": "core/start.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/fd_stat_get-stdout.wasm",
            "status": "FAIL",
            "message": "warning: this CLI invocation of Wasmtime will be parsed differently in future\n         Wasmtime versions -- see this online issue for more information:\n         https://github.com/bytecodealliance/wasmtime/issues/7384\n\n         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n         however this behavior can also be temporarily configured with an\n         environment variable:\n\n         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\nabort:  in fd_stat_get-stdout.ts(20:1)\nError: failed to run main module `fd_stat_get-stdout.wasm`\n\nCaused by:\n    0: failed to invoke command default\n    1: error while executing at wasm backtrace:\n           0:  0x4c1 - <unknown>!<wasm function 9>\n           1:  0x6b4 - <unknown>!<wasm function 18>\n           2:  0x6c5 - <unknown>!<wasm function 19>\n    2: exit with invalid exit status outside of [0..126)\n"
        },
        {
            "path": "core/clock_get_res-monotonic.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/clock_get_res-realtime.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/proc_exit-success.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/proc_exit-failure.wasm",
            "status": "PASS",
            "message": ""
        },
        {
            "path": "core/fd_stat_get-stderr.wasm",
            "status": "FAIL",
            "message": "warning: this CLI invocation of Wasmtime will be parsed differently in future\n         Wasmtime versions -- see this online issue for more information:\n         https://github.com/bytecodealliance/wasmtime/issues/7384\n\n         Wasmtime will now execute with the old (<= Wasmtime 13) CLI parsing,\n         however this behavior can also be temporarily configured with an\n         environment variable:\n\n         - WASMTIME_NEW_CLI=0 to indicate old semantics are desired and silence this warning, or\n         - WASMTIME_NEW_CLI=1 to indicate new semantics are desired and use the latest behavior\nabort:  in fd_stat_get-stderr.ts(20:1)\nError: failed to run main module `fd_stat_get-stderr.wasm`\n\nCaused by:\n    0: failed to invoke command default\n    1: error while executing at wasm backtrace:\n           0:  0x4c1 - <unknown>!<wasm function 9>\n           1:  0x6b4 - <unknown>!<wasm function 18>\n           2:  0x6c5 - <unknown>!<wasm function 19>\n    2: exit with invalid exit status outside of [0..126)\n"
        },
        {
            "path": "core/sched_yield.wasm",
            "status": "PASS",
            "message": ""
        }
    ]
}